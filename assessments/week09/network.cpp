/*
Handle the CDR files that contain CDR records.
Each CDR record contains descriptions of charging events such as voice calls and SMS messages with all
relevant data.
Offline charging is a process where charging information for network resource usage is collected concurrently
with that resource usage. The charging information is then passed through a chain of logical charging functions.
At the end of this process, CDR files are generated by the network, which are then transferred to the network
operator’s BD(Billing domain) for the purpose of subscriber billing and inter-operator accounting.
CDR File Format:
The CDR files contain a header section followed by a variable sized CDR data section. The CDR data section
contains zero or more concatenated CDR records. Each CDR record is encoded on a single line.
CDR record is composed of the following fields separated by |
•MSISDN: unique number identifying a subscription in a mobile network maximum length of an MSISDN to 7
digits.
•Operator Brand Name: a string maximum 64 chars. Such as “Airtel”.
•Operator MMC/MNC: mobile country code and mobile network code maximum 6 digits.
•Call type: call type one of:
-MOC: outgoing voice call.
-MTC: incoming voice call.
-SMS-MO: outgoing message.
-SMS-MT: incoming message.
-GPRS: internet
•Duration: in seconds
•Download: MB downloaded if type is GPRS
•Upload: MB uploaded if type is GPRS
•Third party MSISDN: corresponding third party in this call, empty for GPRS
1. Customer Billing
2. Inter Operator Settlement
The CDR files are usually large files (1-5 MB). Processor will read and process files in order to fulfil the
following functions,
For Customer Billing, each customer identified by MSISDN, information will be produced that will contain:
•Outgoing voice calls duration to a subscriber within the mobile operator.
•Incoming voice calls duration to a subscriber within the mobile operator.
•Outgoing voice calls duration to a subscriber outside the mobile operator.
•Incoming voice calls duration to a subscriber outside the mobile operator.
•SMS messages sent within the mobile operator.
•SMS messages received within the mobile operator.
•SMS messages sent outside the mobile operator.
•SMS messages received outside the mobile operator.
•MB downloaded.
•MB uploaded.
Print results
•Print each customer data in the following format.
Example:
# Customers Data Base:
Customer ID: 1522840 (JIO)
* Services within the mobile operator *
Incoming voice call durations: 0
Outgoing voice call durations: 0
Incoming SMS messages: 0
Outgoing SMS messages: 0
* Services outside the mobile operator *
Incoming voice call durations: 0
Outgoing voice call durations: 312
Incoming SMS messages: 0
Outgoing SMS messages: 0
* Internet use *
MB downloaded: 0 | MB uploaded: 0
for the input CDR record,
1522840|Jio|42502|MOC|312|0|0|1697783|42501
For Inter Operator Settlement each mobile operator identified by Operator MMC/MNC we will aggregate all:
•Incoming voice call durations.
•Outgoing voice call durations
•Incoming SMS messages
•Outgoing SMS messages
•MB downloaded.
•MB uploaded.
Print results
•Print for each operator aggregated data.
# Operator Data Base:
Operator Brand: JIO (42502)
Incoming voice call durations: 876475
Outgoing voice call durations: 879242
Incoming SMS messages: 3907
Outgoing SMS messages: 4088
MB downloaded: 445752 | MB uploaded: 418127
for the CDR file as attached
data.cdr

Requirement Description
Application start with the display welcome message
Application to display menu to perform below operations.
1. SignUp
2. Login
3. exit
choice:
Application request for SignUp or Login
Use proper classes for signup and store the information about the user in the db.
after successful login, Application should be displayed with the following menu
1. Process CDR file
2. Print/Search for Billing Information
3. Logout
choice:
Choice 1 should process the following task,
1. processing of the CDR file for Customer Billing and Interoperator Billing is carried out
2. simultaneously/paralelly using multi threading for both the fucntions at a time to save time.
Application stores the processed information in the STL containers.
After processing the file display the message mentioning "processed the CDR data".
Now Application will use 2nd option for print the processes data as follows.
1. Customer Billing
2. Interoperator Settlement Billing
3. Back
Choice:
for choice 1, user is displayed with the following menu
1. Search for MSISDN to get the required result on the user screen
2. Get the all the content of the processed data for Customer Billing in the file called CB.txt
for the choice 2, user is displayed with following menu.
1. Search for Brand Name/Operator ID identified by Operator MMC/MNC to get the required result on the user screen
2. Get the all the content of the processed data for Interoperator Settlement Billing in the file called IOSB.txt
for choice 3 Application shou

*/



#include<iostream>
#include<vector>
#include<thread>
#include<mutex>
#include<queue>
#include<map>
#include<unordered_map>
#include<condition_variable>
#include<set>
#include<stdexcept>
#include<exception>
#include<fstream>
#include<sstream>
#include<chrono>

using namespace std;

std::mutex mtx;

class Calltype {
protected:
	int MOC;
	int MTC;
	int SMS_MO;
	int SMS_MT;
public:
	Calltype() {}
	Calltype(int MOC, int MTC, int SMS_MT, int SMS_MO) {
		this->MOC = MOC;
		this->MTC = MTC;
		this->SMS_MT = SMS_MT;
		this->SMS_MO = SMS_MO;
	}
	void setMOC(int MOC) { this->MOC = MOC; }
	void setMTC(int MTC) { this->MTC = MTC; }
	void setSMS_MO(int SMS_MO) { this->SMS_MO = SMS_MO; }
	void setSMS_MT(int SMS_MT) { this->SMS_MT = SMS_MT; }
	int getMOC() { return MOC; }
	int getMTC() { return MTC; }
	int getSMS_MO() { return SMS_MO; }
	int getSMS_MT() { return SMS_MT; }
	~Calltype(){}


};
class User
{
protected:
	string username;
public:
	User(){}
	User(const string& username){
		this->username = username;
	}
	virtual void login() = 0;
	virtual void logout() = 0;
	string getUsername() { return username; }
	~User(){}
};
class InterOperation:public User
{
protected:
	int IMOC;
	int IMTC;
	int ISMS_MO;
	int ISMS_MT;
public:
	InterOperation(){}
	InterOperation(int IMOC,int IMTC,int ISMS_MO,int ISMS_MT):IMOC(IMOC),IMTC(IMTC),ISMS_MO(ISMS_MO),ISMS_MT(ISMS_MT){}
	void setIMOC(int IMOC) { this->IMOC = IMOC; }
	void setIMTC(int IMTC) { this->IMTC = IMTC; }
	void setISMS_MO(int ISMS_MO) { this->ISMS_MO = ISMS_MO; }
	void setISMS_MT(int ISMS_MT) { this->ISMS_MT = ISMS_MT; }
	int getIMOC() { return IMOC; }
	int getIMTC() { return IMTC; }
	int getISMS_MO() { return ISMS_MO; }
	int getISMS_MT() { return ISMS_MT; }
	void login() override
	{
		std::lock_guard<std::mutex> lock(mtx);
		cout << "InterOperation process started for" <<username<< endl;
	}
	void logout() override {
		std::lock_guard<std::mutex> lock(mtx);
		cout << "InterOperation process ended for" << username << endl;
	}
	
	void displayIO()
	{
		std::lock_guard<std::mutex> lock(mtx);
		std::this_thread::sleep_for(std::chrono::seconds(1));
		cout << "* Services within the mobile operator *" << endl;
		cout << "Incoming voice call durations : " << getIMTC() << endl;
		cout << "Outgoing voice call durations : " << getIMOC() << endl;
		cout << "Incoming SMS messages : " << getISMS_MT() << endl;
		cout << "Outgoing SMS messages : " << getISMS_MO() << endl;
	}
	
	~InterOperation(){}

};

class Internet {
protected:
	int download;
	int upload;
public:
	Internet() {}
	Internet(int download, int upload) {
		this->download = download;
		this->upload = upload;
	}
	void setD(int download) { this->download = download; }
	void setU(int upload) { this->upload = upload; }
	int getD() { return download; }
	int getU() { return upload; }

	void displayI() {
		std::lock_guard<std::mutex> lock(mtx);
		std::this_thread::sleep_for(std::chrono::seconds(1));
		cout << " * Internet use *" << endl;
		cout << "MB downloaded : " << getD() << "|"
			<< "MB uploaded : " << getU() << endl;
	}
	~Internet(){}

};
class Customer:public User, public Calltype,public Internet
{
protected:
	int MTC, MOC, SMS_MT, SMS_MO;
public:
	Customer(){}
	Customer(int MTC, int MOC,int SMS_MT,int SMS_MO):Calltype(MTC,MOC,SMS_MT,SMS_MO){}
	void setMOC(int MOC) { this->MOC = MOC; }
	void setMTC(int MTC) { this->MTC = MTC; }
	void setSMS_MO(int SMS_MO) { this->SMS_MO = SMS_MO; }
	void setSMS_MT(int SMS_MT) { this->SMS_MT = SMS_MT; }
	int getMOC() { return MOC; }
	int getMTC() { return MTC; }
	int getSMS_MO() { return SMS_MO; }
	int getSMS_MT() { return SMS_MT; }
	void login() override
	{
		std::lock_guard<std::mutex> lock(mtx);
		cout << "Customer process started for" << username << endl;
	}
	void logout() override {
		std::lock_guard<std::mutex> lock(mtx);
		cout << "Customer process ended for" << username << endl;
	}
	void cal()
	{
		int tot = MTC + MOC + SMS_MT + SMS_MO;
	}
	
	void displayC()
	{
		std::lock_guard<std::mutex> lock(mtx);
		std::this_thread::sleep_for(std::chrono::seconds(5));
		cout << "* Services outside the mobile operator *" << endl;
		cout << "Incoming voice call durations : " << getMTC() << endl;
		cout << "Outgoing voice call durations : " << getMOC() << endl;
		cout << "Incoming SMS messages : " << getSMS_MT() << endl;
		cout << "Outgoing SMS messages : " << getSMS_MO() << endl;
		displayI();

	}
	~Customer(){}
	
};
class CDR:public InterOperation,public Customer
{
private:
	int MSISDN;
	string brandName;
	int networkCode;
	string callType;
	int GPRS;
	int durationSeconds;
	int download;
	int upload;
	int CMTC, CMOC ,CSMS_MT, CSMS_MO;
	
public:
	CDR(){}
	CDR(int MSISDN, const string& brandName, int networkCode,const string& callType, int GPRS, int durationSeconds, int download,
		int upload,int CMTC, int CMOC, int CSMS_MT, int CSMS_MO){
		this->MSISDN = MSISDN;
		this->brandName = brandName;
		this->networkCode = networkCode;
		this->callType = callType;
		this->GPRS = GPRS;
		this->durationSeconds = durationSeconds;
		this->download = download;
		this->upload = upload;
		this->CMTC = CMTC;
		this->CMOC = CMOC;
		this->CSMS_MT = CSMS_MT;
		this->CSMS_MO = CSMS_MO;
	}

	int getM() { return MSISDN; }
	string getBname() { return brandName; }
	void interOp()
	{
		std::lock_guard<std::mutex> lock(mtx);
		cout << "# Operator Data Base:" << endl;
		cout << "Operator Brand: " << brandName << "(" << networkCode << ")" << endl;
		std::this_thread::sleep_for(std::chrono::seconds(2));
		cout << "Incoming voice call durations : " <<CMTC << endl;
		cout << "Outgoing voice call durations : " << CMOC << endl;
		cout << "Incoming SMS messages : " << CSMS_MT << endl;
		cout << "Outgoing SMS messages : " << CSMS_MO << endl;
		cout << "MB downloaded : " << download << endl;
		cout << "MB uploaded : " << upload << endl;
			
	}
	void customer()
	{
		std::lock_guard<std::mutex> lock(mtx);
		cout << "# Customer Data Base:" << endl;
		cout << "Customer ID : " << MSISDN << "(" << brandName << ")";
		std::this_thread::sleep_for(std::chrono::seconds(10));
		displayIO();
		if (networkCode == networkCode)
		{
			InterOperation::displayIO();
		}
		else
		{
			exit(0);
		}
		displayC();
		
			
	}
	~CDR(){}
};

class CDRManage
{
private:
	unordered_map<std::string, CDR> cdr;
	thread threadScheduler;
	mutex cdrMtx;
public:
	CDRManage(){}
	void start() {
		if (threadScheduler.joinable())
		{
			threadScheduler.join();
		}
	}
	void create(const string& cdr) {
		std::unique_lock<std::mutex> lock(cdrMtx);
		std::this_thread::sleep_for(std::chrono::seconds(5));
		for (auto& pair : cdr)
		{
			cout << cdr << endl;
		}
		cdrMtx.unlock();
	}
	void stop() {
		if (threadScheduler.joinable())
		{
			threadScheduler.join();
		}
	}
	~CDRManage(){}
};

class FileManage:public CDR
{
private:
	ofstream logFile;
	mutex logMtx;
public:
	FileManage(const string& filename) :logFile(filename) {
		logFile.open(filename, std::ios::app);
			if (!logFile.is_open())
			{
			  throw runtime_error("failed to open log file");
			}
	}
	void logO(int MSISDN, const string& brandName, int networkCode, const string& callType, int GPRS, int durationSeconds, int download,
		int upload, int CMTC, int CMOC, int CSMS_MT, int CSMS_MO) {
		std::lock_guard<std::mutex> lock(logMtx);
		logFile << "Operator Brand: " << brandName << "(" << networkCode << ")" << endl;
		std::this_thread::sleep_for(std::chrono::seconds(2));
		logFile << "Incoming voice call durations : " << getMTC() << endl;
		logFile << "Outgoing voice call durations : " << getMOC() << endl;
		logFile << "Incoming SMS messages : " << getSMS_MT() << endl;
		logFile << "Outgoing SMS messages : " << getSMS_MO() << endl;
		logFile << "MB downloaded : " << getD() << endl;
		logFile << "MB uploaded : " << getU() << endl;
		
	}
	void logC(int MSISDN, const string& brandName, int networkCode, const string& callType, int GPRS, int durationSeconds, int download,
		int upload, int CMTC, int CMOC, int CSMS_MT, int CSMS_MO) {
		std::lock_guard<std::mutex> lock(logMtx);
		logFile << "Customer ID : " << getM() << "(" << getBname() << ")";
		std::this_thread::sleep_for(std::chrono::seconds(5));
		logFile << "* Services within the mobile operator *" << endl;
		logFile << "Incoming voice call durations : " << getIMTC() << endl;
		logFile << "Outgoing voice call durations : " << getIMOC() << endl;
		logFile << "Incoming SMS messages : " << getISMS_MT() << endl;
		logFile << "Outgoing SMS messages : " << getISMS_MO() << endl;
		
		std::this_thread::sleep_for(std::chrono::seconds(1));
		logFile << "* Services outside the mobile operator *" << endl;
		logFile << "Incoming voice call durations : " << getMTC() << endl;
		logFile << "Outgoing voice call durations : " << getMOC() << endl;
		logFile << "Incoming SMS messages : " << getSMS_MT() << endl;
		logFile << "Outgoing SMS messages : " << getSMS_MO() << endl;
		logFile << " * Internet use *" << endl;
		logFile << "MB downloaded : " << getD() << "|"
			<< "MB uploaded : " << getU() << endl;

	}
	void logActivity(const string& activity)
	{
		logFile << activity << endl;
	}
	
	void logclose() {
		if (logFile.is_open())
		{
			logFile.close();
		}
	}
	~FileManage(){
		logclose();
	}
};

int main()
{
	FileManage file("operator.txt");
	file.logActivity("Telecom System Management");
	file.logActivity("# Operator Data Base:");
	InterOperation InterOp;
	InterOp.login();
	Customer cNo(844736, 874157, 4000, 3990);
	Internet I(408486, 416108);
	CDR cdr(1037928, "Jio", 42502, "SMS - MT", 0, 0, 1136404, 42504, 844736, 874157, 4000, 3990);
	CDR cdr2(1169862, "012 ", 42504, " SMS - MT ", 0, 0, 1119658, 42500, 844736, 874157, 4000, 3990);
	file.logO(1037928, "Jio", 42502, "SMS - MT", 0, 0, 1136404, 42504, 862576, 855646, 3905, 3998);
	file.logO(1169862, "012 ", 42504, " SMS - MT ", 0, 0, 1119658, 42500, 862576, 855646, 3905, 3998);
	cdr.interOp();
	InterOp.logout();
	file.logActivity("End of Operation");
	file.logclose();

	FileManage file1("customer.txt");
	file1.logActivity("Telecom System Management");
	file1.logActivity("# customer Data Base:");
	Customer Cust1;
	Cust1.login();
	Calltype C1(844736, 874157, 4000, 3990);
	Internet I1(408486, 416108);
	CDR cdr1(1037928, "Jio", 42502, "SMS - MT", 0, 0, 1136404, 42504,0,0,0,0);
	CDR cdr02(1169862, "012 ", 42504, " SMS - MT ", 0, 0, 1119658, 42500,0,0,0,0);
	file1.logO(1037928, "Jio", 42502, "SMS - MT", 0, 0, 1136404, 42504, 0,0,0,0);
	file1.logO(1169862, "012 ", 42504, " SMS - MT ", 0, 0, 1119658, 42500, 0,0,0,0);
	cdr1.customer();
	Cust1.logout();
	file1.logActivity("End of Operation");
	file1.logclose();
	
	

	return 0;
}













